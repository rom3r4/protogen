package ${packageName};

#*
 * %L
 * Protogen
 * %%
 * Copyright (C) 2009 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * L%
 *#

#set( $classNameLowerCaseFirstLetter = $display.uncapitalize($className) )

import java.util.List;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Arrays;

import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.datatable.DataTableSearch;
import ${basePackageName}.dao.*;
import ${basePackageName}.domain.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

/**
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since ${date}
 */
public class ${className}ControllerMvcTest extends AbstractControllerMVCTests {
	
    private ${className} first${className};
    
    @Before
    public void before() {
      #if ( ${domainClass.isUsesCompositeKey()} ) 
    	// at the moment, do nothing for composite keys 
      #elseif ( ${domainClass.getPrimaryKey().getType()} && ${domainClass.getPrimaryKey().getType()} != "Integer" )
        // at the moment, do nothing for ids generated without sequences  
      #else	  
        // add 20 records to test database
        for(int x=1; x<21; x++){
        	${className} ${classNameLowerCaseFirstLetter} = new ${className}();
        	${daoServiceName}.get${className}Service().save(${classNameLowerCaseFirstLetter});
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	first${className} = ${classNameLowerCaseFirstLetter};
	        }
        }   
        this.${daoServiceName}.get${className}Service().getSession().flush();
        this.${daoServiceName}.get${className}Service().getSession().clear();
      #end
    }

    @Test
    public void addShouldDisplayNew${className}Form() throws Exception {
       mockMvc.perform(get("${pathPrefix}/add${pathExtension}"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("${classNameLowerCaseFirstLetter}")) 
       .andExpect(view().name("${jspPath}/edit"));
    }
    
    @Test
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("${pathPrefix}/list${pathExtension}"))
       .andExpect(status().isOk())
       .andExpect(view().name("${jspPath}/list"));
    }
    
    @Test
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("${pathPrefix}/"))
       .andExpect(status().isOk())
       .andExpect(view().name("${jspPath}/list"));
    }
    
    @Test
    public void listAltShouldLoadListOf${className}s() throws Exception {
       mockMvc.perform(get("${pathPrefix}/list_alt${pathExtension}"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("${classNameLowerCaseFirstLetter}List")) 
       .andExpect(view().name("${jspPath}/list_alt"));
    }
    
    
      #if ( ${domainClass.isUsesCompositeKey()} ) 
    	// at the moment, don't test datatables for composite keys 
      #elseif ( ${domainClass.getPrimaryKey().getType()} && ${domainClass.getPrimaryKey().getType()} != "Integer" )
        // at the moment, don't test datatables for ids generated without sequences  
      #else	  
    	  
    @Test
    public void saveNewShouldPersistAndRedirectToListView() throws Exception {
       long count = ${daoServiceName}.get${className}Service().count();
       
       mockMvc.perform(post("${pathPrefix}/save${pathExtension}").with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:${pathPrefix}/list${pathExtension}"));   
       
       assertEquals("count should increase by 1", count +1 , ${daoServiceName}.get${className}Service().count());
	}
     
    @Test
    public void saveExistingShouldPersistAndRedirectToListView() throws Exception {
       long count = ${daoServiceName}.get${className}Service().count();
         
       mockMvc.perform(post("${pathPrefix}/save${pathExtension}").param("${domainClass.getPrimaryKey().getLowerIdentifier()}", first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString()).with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:${pathPrefix}/list${pathExtension}"));   
         
       assertEquals("count NOT should increase", count , ${daoServiceName}.get${className}Service().count());
  	}      
  
    @Test
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("${pathPrefix}/edit${pathExtension}").param("${domainClass.getPrimaryKey().getLowerIdentifier()}", first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("${classNameLowerCaseFirstLetter}")) 
         .andExpect(view().name("${jspPath}/edit"));
    }
    
    @Test
    public void showShouldLoadAndDisplayObject() throws Exception {
    	mockMvc.perform(get("${pathPrefix}/show${pathExtension}").param("${domainClass.getPrimaryKey().getLowerIdentifier()}", first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("${classNameLowerCaseFirstLetter}")) 
         .andExpect(view().name("${jspPath}/show"));
    }
    
    @Test
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("${pathPrefix}/delete${pathExtension}").param("${domainClass.getPrimaryKey().getLowerIdentifier()}", first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("${classNameLowerCaseFirstLetter}")) 
         .andExpect(view().name("${jspPath}/delete"));
    }
    
    @Test
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
        long count = ${daoServiceName}.get${className}Service().count();

       mockMvc.perform(post("${pathPrefix}/delete${pathExtension}").param("${domainClass.getPrimaryKey().getLowerIdentifier()}", first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString())
       .param("submit", "Yes").with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:${pathPrefix}/list${pathExtension}"));  
       
       assertEquals("count should decrease by 1", count - 1 , ${daoServiceName}.get${className}Service().count());
    }
    
    @Test
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        long count = ${daoServiceName}.get${className}Service().count();

       mockMvc.perform(post("${pathPrefix}/delete${pathExtension}").param("${domainClass.getPrimaryKey().getLowerIdentifier()}", first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString())
       .param("submit", "No").with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:${pathPrefix}/list${pathExtension}"));  
       
       assertEquals("count should NOT decrease by 1", count , ${daoServiceName}.get${className}Service().count());
    }
      
    @Test
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	DataTableRequest dtr = getDataTableRequest( Arrays.asList("urls",#foreach( $columnName in $columnNamesList )"$columnName"#if( $foreach.hasNext ),#end#end ));
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("${pathPrefix}/datatable${pathExtension}").content(mapper.writeValueAsString(dtr))
			.param("display", "list")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    	.andExpect(jsonPath("$.recordsTotal", is((int) ${daoServiceName}.get${className}Service().count())))
    	.andExpect(jsonPath("$.recordsFiltered", is((int) ${daoServiceName}.get${className}Service().count())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", containsString("show?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("edit?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("delete?")))
        ;
    }
    	  
    @Test
    public void defaultDatatableShouldReturnJSONDataWith10RowsAndDisplayAltnerateGlyphiconURLsAsEmptyByDefault() throws Exception {
    	DataTableRequest dtr = getDataTableRequest( Arrays.asList("urls",#foreach( $columnName in $columnNamesList )"$columnName"#if( $foreach.hasNext ),#end#end ));
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("${pathPrefix}/datatable${pathExtension}").content(mapper.writeValueAsString(dtr))
			.param("display", "alternateURLs")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    	.andExpect(jsonPath("$.recordsTotal", is((int) ${daoServiceName}.get${className}Service().count())))
    	.andExpect(jsonPath("$.recordsFiltered", is((int) ${daoServiceName}.get${className}Service().count())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", is("")))
        ;
    }
    
    @Test
    public void defaultDatatableShouldReturnErrorTextForBogusColumnName() throws Exception {
    	DataTableRequest dtr = new DataTableRequest();
    	dtr.setStart(1);
    	dtr.setDraw("1");
    	dtr.setLength(10);
    	dtr.setIndividualSearch(true);
    	
    	List<DataTableColumn> columns = dtr.getColumns();
    	DataTableColumn column = new DataTableColumn("0", "asdfasdf", null, true, true, true);
    	DataTableSearch columnSearch = new DataTableSearch("", false);
    	column.setSearch(columnSearch);
    	columns.add(column);
    	dtr.setColumns(columns);
    	
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("${pathPrefix}/datatable${pathExtension}").content(mapper.writeValueAsString(dtr))
			.param("display", "list")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is((int) ${daoServiceName}.get${className}Service().count())))
    	.andExpect(jsonPath("$.recordsFiltered", is((int) ${daoServiceName}.get${className}Service().count())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0].0", is("[error: column asdfasdf not supported]")))
    	;
    }    
    	  
    @Test
    public void defaultDatatableShouldReturnExceptionBecauseCantSearchColumnThatDoesntExist() throws Exception {			
		DataTableRequest dtr = new DataTableRequest();
    	dtr.setStart(1);
    	dtr.setDraw("1");
    	dtr.setLength(10);
    	dtr.setIndividualSearch(true);
    	
    	List<DataTableColumn> columns = dtr.getColumns();
    	DataTableColumn column = new DataTableColumn("0", "asdfasdf", null, true, true, true);
    	DataTableSearch columnSearch = new DataTableSearch("epic fail", false);
    	column.setSearch(columnSearch);
    	columns.add(column);
    	dtr.setColumns(columns);
    	
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("${pathPrefix}/datatable${pathExtension}").content(mapper.writeValueAsString(dtr))
			.param("display", "list")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))	
    	.andExpect(status().isOk())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    	.andExpect(jsonPath("$.recordsTotal", is(0)))
    	.andExpect(jsonPath("$.recordsFiltered", is(0)))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(0))))
    	.andExpect(jsonPath("$.error", IsNull.notNullValue()))
    	;
    }      
      #end
    
    
}