package ${packageName};

#set( $classNameLowerCaseFirstLetter = $display.uncapitalize($className) )

import java.util.List;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Arrays;

import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.datatable.DataTableSearch;
import ${basePackageName}.dao.*;
import ${basePackageName}.domain.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import ${controllerPackageName}.AbstractControllerMVCTests;

/**
 * Generated by Protogen
 * @since ${date}
 */
public class ${className}ResourceMvcTest extends AbstractControllerMVCTests {
	
    private ${className} first${className};
    
    @Before
    public void before() {
      #if ( ${domainClass.isUsesCompositeKey()} ) 
    	// at the moment, do nothing for composite keys 
      #elseif ( ${domainClass.getPrimaryKey().getType()} && ${domainClass.getPrimaryKey().getType()} != "Integer" )
        // at the moment, do nothing for ids generated without sequences  
      #else	  
        // add 20 records to test database
        for(int x=1; x<21; x++){
        	${className} ${classNameLowerCaseFirstLetter} = new ${className}();
        	${daoServiceName}.get${className}Service().save(${classNameLowerCaseFirstLetter});
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	first${className} = ${classNameLowerCaseFirstLetter};
	        }
        }   
      #end
    }    
    
      #if ( ${domainClass.isUsesCompositeKey()} ) 
    	// at the moment, don't test datatables for composite keys 
      #elseif ( ${domainClass.getPrimaryKey().getType()} && ${domainClass.getPrimaryKey().getType()} != "Integer" )
        // at the moment, don't test datatables for ids generated without sequences  
      #else	  
      
	    @Test
	    public void getByPathVariableIdShouldLoadAndReturnObject() throws Exception {
	    	mockMvc.perform(get("${pathPrefix}/"+first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}().toString()))
	         .andExpect(status().isOk())
	         .andExpect(content().contentType("application/json"))
	        .andExpect(jsonPath("$.${domainClass.getPrimaryKey().getLowerIdentifier()}", is(first${className}.get${domainClass.getPrimaryKey().getUpperIdentifier()}())))
	        ;
	    }
      
	    @Test
	    public void getByPathVariableIdShouldReturn404ForBogusId() throws Exception {
	    	mockMvc.perform(get("${pathPrefix}/-123")).andExpect(status().isNotFound());
	    }
	    
	    @Test
	    public void restMappingNotFoundShouldReturn404() throws Exception {
	    	mockMvc.perform(get("${pathPrefix}/asdfasdf/asdfasdf"))
	    	.andExpect(status().isNotFound())
	    	 .andExpect(content().contentType("application/json"))
	        .andExpect(jsonPath("$.message", is("${pathPrefix}/asdfasdf/asdfasdf could not be found.")))
	        .andExpect(jsonPath("$.error", is(true)))
	    	;
	    }
    
      #end
}