/*
 * Created on May 12, 2008
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package edu.uiowa.icts.protogen.springhibernate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import edu.uiowa.webapp.Attribute;
import edu.uiowa.webapp.Entity;

public class DomainCodeGenerator extends AbstractSpringHibernateCodeGenerator {

	protected static final Log log = LogFactory.getLog( DomainCodeGenerator.class );

	/**
	 * @param model
	 * @param pathBase
	 * @param packageRoot
	 */
	public DomainCodeGenerator( SpringHibernateModel model, String pathBase, String packageRoot ) {
		super( model, pathBase, packageRoot );
		( new File( packageRootPath ) ).mkdirs();
	}

	/**
	 * Generate Class for Composite Key
	 * Example TableNameId.java
	 * @param dc
	 * @param packagePath
	 * @throws IOException
	 */
	private void generateDomainCompositeKeyClass( DomainClass dc, String packagePath ) throws IOException {

		if ( !dc.isUsesCompositeKey() ) {
			log.debug( "Does not have composite key" );
			return;
		}

		Entity entity = dc.getEntity();

		BufferedWriter out = createFileInSrcElseTarget(packagePath, entity.getUnqualifiedLabel() + "Id.java" );

		out.write( "package " + dc.getPackageName() + ";\n" );
		List<String> importList = new ArrayList<String>();

		importList.add( "import java.util.*;" );
		importList.add( "import " + dc.getPackageName() + ".*;" );
		importList.add( "import javax.persistence.*;" );
		importList.add( "import java.io.Serializable;" );
		importList.add( "import org.springframework.format.annotation.DateTimeFormat;" );
		importList.add( "import java.text.DateFormat;" );
		importList.add( "import java.text.SimpleDateFormat;" );
		importList.add( "import java.text.ParseException;" );

		Iterator<String> importIter = importList.iterator();

		while ( importIter.hasNext() ) {
			out.write( importIter.next() + "\n" );
		}

		lines( out, 2 );

		SimpleDateFormat sdf = new SimpleDateFormat( "MM/dd/yyyy HH:mm:ss z", Locale.US );
		sdf.setTimeZone( TimeZone.getDefault() );

		out.write( "/**\n" );
		out.write( " * Generated by Protogen \n" );
		out.write( " * @since " + sdf.format( new Date() ) + "\n" );
		out.write( " */\n" );
		out.write( "@Embeddable\n" );
		out.write( "@SuppressWarnings( \"serial\" )\n" );
		out.write( "public class " + entity.getUnqualifiedLabel() + "Id implements Serializable {\n" );

		lines( out, 1 );

		Iterator<Attribute> attribIter0 = entity.getPrimaryKeyAttributes().iterator();
		while ( attribIter0.hasNext() ) {
			Attribute attrib = attribIter0.next();
			String field = "";
			if ( attrib.getJavaTypeClass().equalsIgnoreCase( "date" ) ) {
				spaces( out, 4 );
				out.write( "@DateTimeFormat( pattern = \"yyyy-MM-dd\" )\n" );
			}

			field = "private " + attrib.getJavaTypeClass() + " " + attrib.getUnqualifiedLowerLabel() + ";\n";
			spaces( out, 4 );
			out.write( field );
		}
		lines( out, 1 );
		
		attribIter0 = entity.getPrimaryKeyAttributes().iterator();
		while ( attribIter0.hasNext() ) {
			Attribute attrib = attribIter0.next();
			generateGetter( out, attrib, false );
			lines( out, 1 );
			if ( attrib.getType().equalsIgnoreCase( "date" ) ) {
				generateDateStringSetter( out, attrib );
			}
			generateSetter( out, attrib );
			lines( out, 1 );
		}

		out.write( "}" );
		out.close();
	}

	/**
	 * @param out
	 * @param attrib
	 * @throws IOException
	 */
	private void generateDateStringSetter( BufferedWriter out, Attribute attrib ) throws IOException {
		spaces( out, 4 );
		out.write( "public void set" + attrib.getUpperLabel() + "( String " + attrib.getUnqualifiedLowerLabel() + ") {\n" );
		spaces( out, 8 );
		out.write( "try{\n" );
		spaces( out, 12 );
		out.write( "DateFormat formatter = new SimpleDateFormat( \"MM/dd/yyyy\" );\n" );
		spaces( out, 12 );
		out.write( "formatter.setLenient( true );\n" );
		spaces( out, 12 );
		out.write( "this." + attrib.getUnqualifiedLowerLabel() + " = formatter.parse( " + attrib.getUnqualifiedLowerLabel() + " );\n" );
		out.write( "" );
		out.write( "} catch ( ParseException e) { \n" );
		spaces( out, 12 );
		out.write( "log.error( \"ParseException setting date for " + attrib.getUpperLabel() + "\", e );\n" );
		spaces( out, 8 );
		out.write( "\"}\n" );
		spaces( out, 8 );

		spaces( out, 4 );
		out.write( "}\n" );
	}

	/**
	 * @param out
	 * @param attrib
	 * @throws IOException
	 */
	private void generateSetter( BufferedWriter out, Attribute attrib ) throws IOException {
		spaces( out, 4 );
		out.write( "public void set" + attrib.getUpperLabel() + "(" + attrib.getJavaTypeClass() + " " + attrib.getUnqualifiedLowerLabel() + ") {\n" );
		spaces( out, 8 );
		out.write( "this." + attrib.getUnqualifiedLowerLabel() + " = " + attrib.getUnqualifiedLowerLabel() + ";\n" );
		spaces( out, 4 );
		out.write( "}\n" );
	}

	/**
	 * @param out
	 * @param attrib
	 * @param primaryAnnotations
	 * @throws IOException
	 */
	private void generateGetter( BufferedWriter out, Attribute attrib, boolean primaryAnnotations ) throws IOException {
		spaces( out, 4 );
		out.write( "@Column( name = \"" + attrib.getSqlLabel() + "\"" + ( attrib.isPrimary() ? ", nullable = false" : "" ) + " )\n" );
		spaces( out, 4 );
		out.write( "public " + attrib.getJavaTypeClass() + " get" + attrib.getUpperLabel() + "() {\n" );
		spaces( out, 8 );
		out.write( "return " + attrib.getUnqualifiedLowerLabel() + ";\n" );
		spaces( out, 4 );
		out.write( "}\n" );
	}

	/*
	 * Generate Domain Class for Table
	 *  Example TableName.java
	 */
	private void generateDomainClassCode( DomainClass domainClass, String packagePath ) throws IOException {

		SimpleDateFormat sdf = new SimpleDateFormat( "MM/dd/yyyy hh:mm:ss a z", Locale.US );
		sdf.setTimeZone( TimeZone.getDefault() );

		String comment = "/** \n";
		comment += " * Generated by Protogen - www.icts.uiowa.edu/protogen \n";
		comment += " * @since " + sdf.format( new Date() ) + "\n";
		comment += " */";
		domainClass.setComment( comment );

		if ( domainClass.isUsesCompositeKey() ) {
			generateDomainCompositeKeyClass( domainClass, packagePath );
		}

		BufferedWriter out = createFileInSrcElseTarget( packagePath, domainClass.getIdentifier() + ".java" );
		out.write( domainClass.toString() );
		out.close();
	}


	/*
	 * Public Function to generate java domain code
	 */
	public void generate() throws IOException {
		for ( DomainClass dc : model.getDomainClassList() ) {
			String packagePath = pathBase + "/" + dc.getPackageName().replaceAll( "\\.", "/" );
			( new File( packagePath ) ).mkdirs();
			generateDomainClassCode( dc, packagePath );

		}
	}
}